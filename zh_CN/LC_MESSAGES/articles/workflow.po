# 
msgid ""
msgstr ""
"Project-Id-Version: Murano 1.0.0.0b1.54\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-21 22:16\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../articles/workflow.rst:18
msgid "Murano workflow"
msgstr "Murano 工作流"

#: ../../articles/workflow.rst:19
msgid ""
"What happens when a component is being created in an environment? This "
"document will use the Telnet package referenced elsewhere as an example. It "
"assumes the package has been previously uploaded to Murano."
msgstr ""
"在环境中当组件被创建之后发生了什么？"
"此文档以Telnet软件包为参考案例。它假设的前提是软件包已经上传给Murano。"

#: ../../articles/workflow.rst:25
msgid "Step 1.  Begin deployment"
msgstr "步骤 1. 开始部署"

#: ../../articles/workflow.rst:26
msgid ""
"The API sends a message that instructs murano-engine, the workflow component"
" of Murano, to deploy an environment. The message consists of a JSON "
"document containing the class types required to create the environment, as "
"well as any parameters the user selected prior to deployment. Examples are:"
msgstr ""
"API发送消息给murano-engine，即murano-engine接受了指令，murano-engine是Murano的"
"工作流组件，用来部署环境的。消息由JSON文档组成，包括创建环境所需要的类的类型，"
"以及其它用户在部署期间所选择的参数。举例来说:"

#: ../../articles/workflow.rst:31
msgid "An :ref:`Environment` object (io.murano.Environment) with a *name*"
msgstr "对象 :ref:`Environment` (io.murano.Environment) 的*name*"

#: ../../articles/workflow.rst:32
msgid ""
"An object (or objects) referring to networks that need to be created or that"
" already exist"
msgstr ""

#: ../../articles/workflow.rst:34
msgid ""
"A list of Applications (e.g. io.murano.apps.linux.Telnet). Each Application "
"will contain, or will reference, anything it requires. The Telnet example, "
"has a property called *instance* whose contract states it must be of type "
"io.murano.resources.Instance. In turn the Instance has properties it "
"requires (like a name, a flavor, a keypair name)."
msgstr ""

#: ../../articles/workflow.rst:40
msgid ""
"Each object in this *model* has an ID so that the state of each can be "
"tracked."
msgstr ""

#: ../../articles/workflow.rst:42
msgid ""
"The classes that are required are determined by the application's manifest. "
"In the :ref:`Telnet example <Telnet Manifest>` only one class is explicitly "
"required; the telnet application definition."
msgstr ""

#: ../../articles/workflow.rst:46
msgid ""
"The :ref:`Telnet class definition <Telnet Class>` refers to several other "
"classes. It extends :ref:`Application` and it requires an :ref:`Instance`. "
"It also refers to the :ref:`Environment` in which it will be contained, "
"sends reports through the environment's "
":ref:`io.murano.system.StatusReporter` and adds security group rules to the "
":ref:`SecurityGroupManager`."
msgstr ""

#: ../../articles/workflow.rst:54
msgid "Step 2.  Load definitions"
msgstr ""

#: ../../articles/workflow.rst:55
msgid ""
"The engine makes a series of requests to the API to download packages it "
"needs. These requests pass the class names the environment will require, and"
" during this stage the engine will validate that all the required classes "
"exist and are accessible, and will begin creating them. All Classes whose "
"*workflow* sections contain an *initialize* fragment are then initialized. A"
" typical initialization order would be (defined by the ordering in the "
"*model* sent to the murano-engine):"
msgstr ""

#: ../../articles/workflow.rst:62
msgid ":ref:`Network`"
msgstr ":ref:`Network`"

#: ../../articles/workflow.rst:63
msgid ":ref:`Instance`"
msgstr ":ref:`Instance`"

#: ../../articles/workflow.rst:64
msgid ":ref:`Object`"
msgstr ":ref:`Object`"

#: ../../articles/workflow.rst:65
msgid ":ref:`Environment`"
msgstr ":ref:`Environment`"

#: ../../articles/workflow.rst:69
msgid "Step 3.   Deploy resources"
msgstr "步骤 3. 部署资源"

#: ../../articles/workflow.rst:70
msgid ""
"The workflow defined in Environment.deploy is now executed. The first step "
"typically is to initialize the messaging component that will pay attention "
"to murano-agent (see later). The next stage is to deploy each application "
"the environment knows about in turn, by running deploy() for each "
"application. This happens concurrently for all the applications belonging to"
" an instance."
msgstr ""

#: ../../articles/workflow.rst:76
msgid ""
"In the :ref:`Telnet example <Telnet Class>` (under *Workflow*), the workflow"
" dictates sending a status message (via the environment's *reporter*, and "
"configuring some security group rules. It is at this stage that the engine "
"first contacts Heat to request information about any pre-existing resources "
"(and there will be none for a fresh deploy) before updating the new Heat "
"template with the security group information."
msgstr ""

#: ../../articles/workflow.rst:83
msgid ""
"Next it instructs the engine to deploy the  *instance* it relies on. A large"
" part of the interaction with Heat is carried out at this stage; the first "
"thing an Instance does is add itself to the environment's network. Since the"
" network doesn't yet exist, murano-engine runs the neutron network workflow "
"which pushes template fragments to Heat. These fragments can define: * "
"Networks * Subnets * Router interfaces"
msgstr ""

#: ../../articles/workflow.rst:92
msgid ""
"Once this is done the Instance itself constructs a Heat template fragment "
"and again pushes it to Heat. The Instance will include a *userdata* script "
"that is run when the instance has started up, and which will configure and "
"run murano-agent."
msgstr ""

#: ../../articles/workflow.rst:99
msgid "Step 4.  Software configuration via murano-agent"
msgstr ""

#: ../../articles/workflow.rst:100
msgid ""
"If the workflow includes murano-agent components (and the telnet example "
"does), typically the application workflow will execute them as the next "
"step."
msgstr ""

#: ../../articles/workflow.rst:103
msgid ""
"In the telnet example, the workflow instructs the engine to load "
"*DeployTelnet.yaml* as YAML, and pass it to the murano-agent running on the "
"configured instance. This causes the agent to execute the *EntryPoint* "
"defined in the agent script (which in this case deploys some packages and "
"sets some iptables rules)."
msgstr ""

#: ../../articles/workflow.rst:111
msgid "Step 5.  Done"
msgstr "步骤 5. 完成"

#: ../../articles/workflow.rst:112
msgid ""
"After execution is finished, the engine sends a last message indicating that"
" fact; the API receives it and marks the environment as deployed."
msgstr ""
